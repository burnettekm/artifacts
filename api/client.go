package api

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
)

type Client struct {
	basePath   string
	AuthToken  string
	httpClient *http.Client
}

func NewClient(basePath, authToken string) *Client {
	return &Client{
		basePath:   basePath,
		AuthToken:  authToken,
		httpClient: http.DefaultClient,
	}
}

func (c *Client) GetCharacter(name string) (*AutoGenerated, error) {
	u, err := url.Parse(c.basePath)
	if err != nil {
		return nil, fmt.Errorf("parsing base path: %w", err)
	}
	u.Path = fmt.Sprintf("/characters/%s", name)

	req, err := http.NewRequest(http.MethodGet, u.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("preparing request: %w", err)
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("Authorization", fmt.Sprintf("Bearer %s", c.AuthToken))

	res, err := c.httpClient.Do(req)
	if err != nil {
		return nil, fmt.Errorf("making request: %w", err)
	}
	if res.StatusCode != 200 {
		return nil, fmt.Errorf("error response: resp code: %d", res.StatusCode)
	}
	defer res.Body.Close()

	bytes, err := io.ReadAll(res.Body)
	if err != nil {
		return nil, fmt.Errorf("reading body: %w", err)
	}

	char := AutoGenerated{}
	if err := json.Unmarshal(bytes, &char); err != nil {
		return nil, fmt.Errorf("unmarshalling resp payload: %w", err)
	}
	return &char, nil
}
